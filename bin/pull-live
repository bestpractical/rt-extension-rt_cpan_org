#!/home/rtcpan/perl/bin/perl

use Getopt::Long;

my (@skip, @only);
GetOptions(
    "skip=s@" => \@skip,
    "only=s@" => \@only,
);

sub skip($);

my $perl = $ENV{'PERL'} = '/home/rtcpan/perl/bin/perl';

my $root = $ENV{'RTHOME'} = "/home/rtcpan/rt3";

my $rt_opts =
     " --prefix=$root"
    ." --with-db-type=mysql"
    ." --with-db-host=''" # connect via socket
    ." --with-db-port=3307"
    ." --with-db-database=rt_cpan_org"
    ." --with-web-user=rtcpan"
    ." --with-web-group=rtcpan";

use File::Temp qw(tempdir);
use File::Path qw(rmtree);

my @UPDATE = qw{
    RT-Extension-MergeUsers
    RT-Authen-Bitcard
    RT-Authen-PAUSE
    RT-BugTracker
    RT-BugTracker-Public
    RT-Extension-rt_cpan_org
    RT-Extension-QuickDelete
    RT-Extension-ReportSpam
    RT-Authen-OpenID
    CPAN2RT
};

my %REPOS = (
    'CPAN2RT'                  => 'svn://svn.bestpractical.com/CPAN2RT/',
    'RT-Authen-Bitcard'        => 'svn://svn.bestpractical.com/RT-Authen-Bitcard/',
    'RT-Authen-OpenID'         => 'svn://svn.bestpractical.com/RT-Authen-OpenID/',
    'RT-Authen-PAUSE'          => 'svn://svn.bestpractical.com/RT-Authen-PAUSE/',
    'RT-BugTracker'            => 'svn://svn.bestpractical.com/RT-BugTracker/',
    'RT-BugTracker-Public'     => 'svn://svn.bestpractical.com/RT-BugTracker-Public/',
    'RT-Extension-MergeUsers'  => 'git://github.com/bestpractical/rt-extension-mergeusers.git',
    'RT-Extension-QuickDelete' => 'svn://svn.bestpractical.com/RT-Extension-QuickDelete/',
    'RT-Extension-rt_cpan_org' => 'svn://svn.bestpractical.com/RT-Extension-rt_cpan_org/',
    'RT-Extension-ReportSpam'  => 'svn://svn.bestpractical.com/RT-Extension-ReportSpam/',
);

my $tmp_dir = tempdir( CLEAN => 1 )
    or die "Couldn't get temp dir";

chdir $tmp_dir;

unless ( skip 'RT' ) {
    my $repo = 'git://github.com/bestpractical/rt.git';
    ($_ = `git clone $repo`)
        or !$? or die "$_\n\nCouldn't export repo";
    ($_ = `cd rt && git checkout origin/3.6-trunk && sh ./configure.ac $rt_opts && sudo make upgrade`)
        or !$? or die "$_\n\nCouldn't upgrade RT";
}


foreach my $module (@UPDATE) {
    next if skip $module;

    print "Trying to install $module...\n";

    my $repo = $REPOS{ $module };
    print "Getting $repo...\n";
    if ( $repo =~ /^svn/ ) {
    ($_ = `svn export --quiet --non-interactive --force $repo $module`)
        or !$? or die "$_\n\nCouldn't export repo";
    } else {
    ($_ = `git clone $repo $module`)
        or !$? or die "$_\n\nCouldn't export repo";
    }

    print "Installing $module...\n";
    ($_ = `cd $module && $perl ./Makefile.PL && make && sudo make install`)
        or !$? or die "$_\n\nCouldn't install module";

    rmtree($module);
}

# adjust bugs-per-dist.data and queue-addresses
foreach my $path (qw(/local/html/Public/bugs-per-dist.data /local/html/NoAuth/cpan)) {
    my $f = $root . $path;
    `touch $f` unless -e $f;
    ($_ = `chown -R rtcpan:rtcpan $f`)
        or !$? or die "$_\n\nCouldn't change owner of '$f'";
}

exit 0;

sub skip($) {
    my $name = shift;
    return 1 if @skip &&  grep $name eq $_, @skip;
    return 1 if @only && !grep $name eq $_, @only;
    return 0;
}

