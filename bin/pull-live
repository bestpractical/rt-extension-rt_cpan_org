#!/usr/bin/env perl

use Getopt::Long;

my $rthome = $ENV{'RTHOME'} || "/home/rtcpan/rt40";
my (@skip, @only, $batch);
GetOptions(
    "skip=s@" => \@skip,
    "only=s@" => \@only,
    "rt=s"    => \$rthome,
    "batch"   => \$batch,
);

sub skip($);

my $perl = $ENV{'PERL'} = $^X;

my $root = $ENV{'RTHOME'} = $rthome;

unless ($batch) {
    print <<SANITY_CHECK;
RT:   $root
Perl: $perl

Press enter to continue or ^C to abort.
SANITY_CHECK
    <STDIN>;
}

my $rt_opts =
     " --prefix=$root"
    ." --with-db-type=mysql"
    ." --with-db-host=''" # connect via socket
    ." --with-db-port=3307"
    ." --with-db-database=rt_cpan_org_40"
    ." --disable-gpg"
    ." --with-web-handler=fastcgi,standalone"
    ." --with-web-user=rtcpan"
    ." --with-web-group=rtcpan";

use File::Temp qw(tempdir);
use File::Path qw(rmtree);

my @UPDATE = qw{
    RT-Extension-MergeUsers
    RT-Authen-Bitcard
    RT-Authen-PAUSE
    RT-BugTracker
    RT-BugTracker-Public
    RT-Extension-rt_cpan_org
    RT-Extension-QuickDelete
    RT-Extension-ReportSpam
    RT-Authen-OpenID
    RT-Extension-Utils
    CPAN2RT
    RT-Extension-CustomizeContentType
};

my %REPOS = (
    'CPAN2RT'                  => 'git://github.com/bestpractical/cpan2rt.git --branch deploy',
    'RT-Authen-Bitcard'        => 'git://github.com/bestpractical/rt-authen-bitcard.git',
    'RT-Authen-OpenID'         => 'git://github.com/bestpractical/rt-authen-openid.git',
    'RT-Authen-PAUSE'          => 'git://github.com/bestpractical/rt-authen-pause.git',
    'RT-BugTracker'            => 'git://github.com/bestpractical/rt-bugtracker.git',
    'RT-BugTracker-Public'     => 'git://github.com/bestpractical/rt-bugtracker-public.git',
    'RT-Extension-MergeUsers'  => 'git://github.com/bestpractical/rt-extension-mergeusers.git',
    'RT-Extension-QuickDelete' => 'git://github.com/bestpractical/rt-extension-quickdelete.git',
    'RT-Extension-rt_cpan_org' => 'git://github.com/bestpractical/rt-extension-rt_cpan_org.git',
    'RT-Extension-ReportSpam'  => 'git://github.com/bestpractical/rt-extension-reportspam.git',
    'RT-Extension-Utils'       => 'git://github.com/bestpractical/rt-extension-utils.git',
    'RT-Extension-CustomizeContentType' => 'git://github.com/bestpractical/rt-extension-customizecontenttype.git',
);

my $tmp_dir = tempdir( CLEANUP => 1 )
    or die "Couldn't get temp dir";

chdir $tmp_dir;

unless ( skip 'RT' ) {
    my $url = 'http://download.bestpractical.com/pub/rt/release/rt.tar.gz';
    ($_ = `curl $url | tar xzp`)
        or !$? or die "$_\n\nCouldn't download and extract RT ($url)";
    ($_ = `cd rt-4.* && ./configure $rt_opts && sudo make install`)
        or !$? or die "$_\n\nCouldn't upgrade RT";
}


foreach my $module (@UPDATE) {
    next if skip $module;

    print "Trying to install $module...\n";

    my $repo = $REPOS{ $module };
    print "Getting $repo...\n";
    if ( $repo =~ /^svn/ ) {
    ($_ = `svn export --quiet --non-interactive --force $repo $module`)
        or !$? or die "$_\n\nCouldn't export repo";
    } else {
    ($_ = `git clone $repo $module`)
        or !$? or die "$_\n\nCouldn't export repo";
    }

    print "Installing $module...\n";
    ($_ = `cd $module && $perl ./Makefile.PL && make && sudo make install`)
        or !$? or die "$_\n\nCouldn't install module";

    rmtree($module);
}

# adjust bugs-per-dist.data and queue-addresses
foreach my $path (qw(/local/plugins/RT-Extension-rt_cpan_org/html/Public/bugs-per-dist.data /local/plugins/RT-Extension-rt_cpan_org/html/NoAuth/cpan)) {
    my $f = $root . $path;
    `touch $f` unless -e $f;
    ($_ = `chown -R rtcpan:rtcpan $f`)
        or !$? or die "$_\n\nCouldn't change owner of '$f'";
}

# clean mason cache
($_ = `rm -fr $root/var/mason_data/obj/`)
    or !$? or die "$_\n\nCouldn't clean mason cache";


exit 0;

sub skip($) {
    my $name = shift;
    return 1 if @skip &&  grep $name eq $_, @skip;
    return 1 if @only && !grep $name eq $_, @only;
    return 0;
}

