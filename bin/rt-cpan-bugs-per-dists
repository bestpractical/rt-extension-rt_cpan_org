#!/usr/bin/env perl
use strict;
use warnings;

use List::Util "sum";

eval { require RT; 1 } or do {
    print STDERR "$@\n\nusage: perl -I /opt/rt4/local/lib -I/opt/rt4/lib $0 > results.tsv\n";
    exit 1;
};

RT::LoadConfig();
RT::Init();

{ my $ttt = $RT::Handle; } # stop warning
my $dbh = $RT::Handle->dbh;
$dbh->{RaiseError} = 1;


my $query = q{
    SELECT q.Name, t.Status, count(1)
    FROM Queues q STRAIGHT_JOIN Tickets t 
    WHERE
        t.Queue = q.id
        AND t.Type = ?
        AND t.id = t.EffectiveId
        AND t.Status IS NOT NULL

    GROUP BY q.Name, t.Status
    ORDER BY q.Name
};
my $sth = $dbh->prepare($query);
$sth->execute('ticket');

my $lifecycle = RT::Lifecycle->Load("default");
my @active    = $lifecycle->Valid("initial", "active");
my @inactive  = grep { $_ ne "deleted" } $lifecycle->Valid("inactive");
my @statuses  = (@active, @inactive);

my $date = `date`;
chomp $date;
print "# Generated on $date\n";
print "# ", join("\t", "dist", @statuses, "active", "inactive"), "\n";

my %buffer = ('dist' => '');
while (my ($dist, $status, $count) = $sth->fetchrow_array) {
    if ( $buffer{dist} && $buffer{dist} ne $dist ) {
        print_line();

        %buffer = ( dist => $dist, counts => { $status => $count } );
    } else {
        $buffer{dist} ||= $dist;
        $buffer{counts}{ $status } = $count;
    }
}
print_line();

sub print_line {
    $buffer{counts}{"active"}   = sum map $_ || 0, @{ $buffer{counts} }{ @active };
    $buffer{counts}{"inactive"} = sum map $_ || 0, @{ $buffer{counts} }{ @inactive };
    print join("\t", $buffer{dist}, map $_ || 0, @{ $buffer{counts} }{ @statuses, "active", "inactive" } ), "\n";
}
